/*

*/
module BBTools {


    /* A boolean - 0 for false, 1 for true.
        @range (0, 1)
    */
    typedef int boolean;

    /*

    */
    typedef structure {
        string read_library_ref;
        string output_workspace_name;
        string output_library_name;

        string library;
        boolean rna;

        boolean trimfragadapter;
        string qtrim;
        boolean removemouse;
        boolean removecat;
        boolean removedog;
        boolean removehuman;
        boolean removemicrobes;

        list <string> taxlist;

        boolean dedupe;
        boolean opticaldupes;

    } RQCFilterAppParams;


    typedef structure {
        string report_name;
        string report_ref;
    } RQCFilterAppOutput;


    /*
        Parameters for local version of RQCFilter.
        read_library_ref - UPA for the read library to filter.
        -OR-
        reads_file - path to the reads file to filter. Expects an interleaved file, if it's paired end.

        The rest is as above for the App version.
    */
    typedef structure {
        string read_library_ref;
        string reads_file;

        string library;
        boolean rna;

        boolean trimfragadapter;
        string qtrim;
        boolean removemouse;
        boolean removecat;
        boolean removedog;
        boolean removehuman;
        boolean removemicrobes;

        list <string> taxlist;

        boolean dedupe;
        boolean opticaldupes;
    } RQCFilterLocalParams;

    /*
        The output from the local function version of RQCFilter.

        output_directory:
            the path to the output directory containing all files generated by RQCFilter.
        filtered_fastq_file:
            the path to the file (in the output directory) containing the filtered FASTQ reads.
            This will likely be compressed, if you need it decompressed, you can use
            DataFileUtil.unpack_file (see that module).
    */
    typedef structure {
        string output_directory;
        string filtered_fastq_file;
    } RQCFilterLocalOutput;

    funcdef run_RQCFilter_app(RQCFilterAppParams params) returns (RQCFilterAppOutput output)
        authentication required;

    funcdef run_RQCFilter_local(RQCFilterLocalParams params) returns (RQCFilterLocalOutput output)
        authentication required;
};
